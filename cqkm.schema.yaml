# Rime schema settings
# encoding: utf-8

schema:
  schema_id: cqkm
  name: "超强快码"
  version: "4.27"
  description: |
    擅长语句输入，两码一字，三码也可，弱化空格。
    与传统的基于字词的码表类输入方式相比，
      - 输入过程中没有逐字的编码提示，对输入法初学者不友好
      - 单字 3 码定长，取自原版码表的前 3 码，不设一简和二简
      - 不对词组硬编码，没有 4 码定长的二字词、三字词、多字词
      - 包含 24 万词条，由拼音输入引擎(算法)动态调整字词组合
      - 字词可以由空格随时确认，但并没有强制依赖空格的不断确认
  author:
    - 二笔音形编码: "陈劲松 (1992)"
    - 超强系列编码: "付东升 (2005)"
    - Rime输入法引擎: "弓辰[号佛振] (2011)"
    - Fcitx输入法框架: "CSSlayer (2010), Yuking (2001-2010)"
  dependencies:
    - pinyin

switches:
  - name: ascii_mode
    reset: 0
    states: [ 中文, 西文 ]
  - name: full_shape
    states: [ 半角, 全角 ]
  - name: simplification
    reset: 1
    states: [ 漢字, 汉字 ]
  - name: ascii_punct
    states: [ 。，, ．， ]

engine:
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - reverse_lookup_translator
    - script_translator
  filters:
    - simplifier
    - uniquifier

speller:
  alphabet: "asdfgyuiopqwertzxcvbhjklnm;"
  initials: "asdfgyuiopqwertzxcvbhjklnm"
  delimiter: " '"
  algebra:
    - derive/^([a-z]{2})([a-z])$/$1/

translator:
  dictionary: cqkm
  prism: cqkm
  max_phrase_length: 3
  disable_user_dict_for_patterns:
    - "^[a-zA-Z]{1,3}$"   # 禁止单字调频
  preedit_format:
    - xform/^([a-z])/\U$1/
    - xform/[ ]([a-z])/ \U$1/
  comment_format:
    - "xform/~(.*)$/「$1」/"

reverse_lookup:
  dictionary: pinyin
  prefix: "`"
  tips: 〔拼音反查〕
  preedit_format:
    - xform/^`//
  comment_format:
    # 以 i,u,v 开头的编码，在反查结果中排除
    - xform/(^|[ ])[iuv][a-zA-Z]*//
    - xform/^[ ]+//
    - xform/([ ])+/ ~/

simplifier:
  opencc_config: s2t.json
  option_name: zh_trad

punctuator:
  import_preset: symbols

key_binder:
  import_preset: default
  bindings:
    - { when: composing, accept: 1,                  send_sequence: "{Home}{Right}{Right}"                    }
    - { when: composing, accept: 2,                  send_sequence: "{2}{End}"                                }
    - { when: composing, accept: 3,                  send_sequence: "{3}{End}"                                }
    - { when: composing, accept: 4,                  send_sequence: "{4}{End}"                                }
    - { when: composing, accept: 5,                  send_sequence: "{5}{End}"                                }
    - { when: composing, accept: 7,                  send_sequence: "{Shift+Left}{Shift+Left}{Right}{Right}"  }
    - { when: composing, accept: 8,                  send_sequence: "{Shift+Left}{Right}{Right}"              }
    - { when: composing, accept: 9,                  send: "Shift+Left"  }
    - { when: composing, accept: 0,                  send: "Shift+Right" }
    - { when: composing, accept: "Shift+asciitilde", send: "Home"        }
    - { when: composing, accept: grave,              send: "End"         }
    - { when: composing, accept: bracketleft,        send: "Left"        }
    - { when: composing, accept: bracketright,       send: "Right"       }
    - { when: always,    accept: "Control+Alt+j",    toggle: full_shape  }
    - { when: always,    accept: "Control+Alt+f",    toggle: traditional }
    - { when: always,    accept: "Control+period",   toggle: ascii_punct }

recognizer:
  import_preset: default
  patterns:
    punct: '^/([0-9]|[a-z]+)$'
    reverse_lookup: "^`[a-z]*'?$"

